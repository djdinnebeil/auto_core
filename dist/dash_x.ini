/**
\file dash_x.ixx
\brief This module augments dash.ixx for runtime configuration.

This module provides helper functions to map virtual key codes and function names
to their corresponding values. It is automatically generated by dash.exe.
*/
export module dash_x;
import core;

/**
 * \brief Function to get virtual key code from a string representation.
 * \param vk_code_string A string representing the virtual key code.
 * \return The integer value of the virtual key code, or -1 if not found.
 */
export int get_numkey_vk_code(const string & vk_code_string) {
    static const unordered_map<string, int> numkey_vk_code_map = {
        {"numkey_0", numkey_0},
        {"numkey_1", numkey_1},
        {"numkey_2", numkey_2},
        {"numkey_3", numkey_3},
        {"numkey_4", numkey_4},
        {"numkey_5", numkey_5},
        {"numkey_6", numkey_6},
        {"numkey_7", numkey_7},
        {"numkey_8", numkey_8},
        {"numkey_9", numkey_9},
        {"numkey_star", numkey_star},
        {"numkey_plus", numkey_plus},
        {"numkey_dot", numkey_dot},
        {"numkey_enter", numkey_enter},
        {"numkey_dash", numkey_dash},
        {"numkey_slash", numkey_slash},
        {"play_pause_key", play_pause_key},
        {"calculator_key", calculator_key},
        {"mail_key", mail_key},
        {"home_page_key", home_page_key},
    };
    auto it = numkey_vk_code_map.find(vk_code_string);
    return (it != numkey_vk_code_map.end()) ? it->second : -1;
}

/**
 * \brief Function to get a function pointer by name.
 * \param function_name The name of the function to retrieve.
 * \return A function pointer if the function name is found, or nullptr if not found.
 */
export function<void()> get_function_by_name(const string& function_name) {
    static const unordered_map<string, function<void()>> function_map = {
        {"print_iTunes_songs", &print_iTunes_songs},
        {"iTunes_next_song", &iTunes_next_song},
        {"print_next_up_song_list", &print_next_up_song_list},
        {"iTunes_play_pause", &iTunes_play_pause},
        {"remove_iTunes_song", &remove_iTunes_song},
        {"print_Tabby_choice", &print_Tabby_choice},
        {"print_Eric_choice", &print_Eric_choice},
        {"print_Katrina_choice", &print_Katrina_choice},
        {"print_Lily_choice", &print_Lily_choice},
        {"print_Star_choice", &print_Star_choice},
        {"print_Luna_choice", &print_Luna_choice},
        {"print_Daniel_choice", &print_Daniel_choice},
        {"print_Jose_choice", &print_Jose_choice},
        {"print_James_choice", &print_James_choice},
        {"print_Jace_choice", &print_Jace_choice},
        {"print_one_is_selected", &print_one_is_selected},
        {"print_two_is_selected", &print_two_is_selected},
        {"print_gpt_message", &print_gpt_message},
        {"print_networking", &print_networking},
        {"close_program", &close_program},
        {"activate_function_key", &activate_function_key},
        {"deactivate_function_key", &deactivate_function_key},
        {"print_timestamp", &print_timestamp},
        {"print_datestamp", &print_datestamp},
        {"add_brackets_around_clipboard", &add_brackets_around_clipboard},
        {"send_alt_f12", &send_alt_f12},
        {"create_new_note", &create_new_note},
        {"retrieve_and_delete_recycle_bin", &retrieve_and_delete_recycle_bin},
        {"get_user_sp_queue", &get_user_sp_queue},
        {"print_spotify_songs", &print_spotify_songs},
        {"spotify_play_pause", &spotify_play_pause},
        {"spotify_next_song", &spotify_next_song},
        {"sp_switch_player", &sp_switch_player},
        {"save_file_and_create_new_file", &save_file_and_create_new_file},
        {"print_episode_title", &print_episode_title},
        {"activate_auto_core", &activate_auto_core},
        {"activate_folder", &activate_folder},
        {"activate_word", &activate_word},
        {"activate_vs_code", &activate_vs_code},
        {"activate_iTunes", &activate_iTunes},
        {"activate_chrome", &activate_chrome},
        {"activate_visual", &activate_visual},
        {"activate_discord", &activate_discord},
        {"refresh_page", &refresh_page},
        {"refresh_firefox", &refresh_firefox},
        {"start_reddit_new_tab", &start_reddit_new_tab},
        {"activate_firefox", &activate_firefox},
        {"activate_spotify", &activate_spotify},
        {"activate_wordpad", &activate_wordpad},
        {"activate_notepad", &activate_notepad},
        {"activate_gitbash", &activate_gitbash},
        {"activate_powershell", &activate_powershell},
        {"activate_ps_in_visual_key", &activate_ps_in_visual_key},
        {"activate_webstorm", &activate_webstorm},
        {"activate_zoom", &activate_zoom},
        {"launch_task_list", &launch_task_list},
        {"print_task_list", &print_task_list},
    };
    // Check for special case "make_print_choice"
    if (function_name.rfind("make_print_choice", 0) == 0) {
        size_t opening_quotation = function_name.find('"');
        size_t closing_quotation = function_name.find("\",");
        string choice_name = function_name.substr(opening_quotation + 1, closing_quotation - opening_quotation - 1);
        bool bool_value = function_name.find("true", closing_quotation) != string::npos;
        return make_print_choice(choice_name, bool_value);
    }
    // Lookup the function in the map
    auto it = function_map.find(function_name);
    return (it != function_map.end()) ? it->second : nullptr;
}
